buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'com.github.jruby-gradle:jruby-gradle-plugin:1.5.0'
    }
}

apply plugin: "com.github.jruby-gradle.base"

import com.github.jrubygradle.JRubyExec

dependencies {
    jrubyExec "rubygems:asciidoctor:1.5.4"
}

repositories {
    jcenter()
    maven { url "http://rubygems-proxy.torquebox.org/releases/" }
}

jruby {
    defaultRepositories false
}

task generateJenkinsReadme(type: JRubyExec) {
    script "${projectDir}/tools/coalesce-readme.rb"
    scriptArgs "-i ${projectDir}/docs-sources/src/main/asciidoc/JENKINS.adoc", "-o ${projectDir}/jenkins/README.adoc"
}

task generateConcourseReadme(type: JRubyExec) {
    script "${projectDir}/tools/coalesce-readme.rb"
    scriptArgs "-i ${projectDir}/docs-sources/src/main/asciidoc/CONCOURSE.adoc", "-o ${projectDir}/concourse/README.adoc"
}

task generateIndex(dependsOn: ["generateJenkinsReadme", "generateConcourseReadme"]) {
    doLast {
        exec {
            workingDir project(":docs-sources").projectDir.path
            commandLine "./mvnw", "clean", "install", "-Pdocs"
        }
    }
}

task cleanDocs(type: Delete) {
    delete project(":docs").projectDir.path
}

task copyJekyll(type: Copy) {
    dependsOn(["cleanDocs"])
    from new File(project(":docs-sources").projectDir, "src/main/jekyll").path
    into project(":docs").projectDir.path
}

task copyGeneratedSources(type: Copy) {
    dependsOn(["cleanDocs", "generateIndex"])
    from(new File(project(":docs-sources").projectDir, "target/generated-docs").path) {
        exclude "spring-cloud-pipelines.xml"
    }
    into project(":docs").projectDir.path
}

task generateDocs(dependsOn: ["copyJekyll", "copyGeneratedSources"]) {
    description = "Creates documentation for the project"
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}
